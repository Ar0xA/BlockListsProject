'''
Created on Dec 30, 2012

This script should go online to a list of URLs containing IP and domain blocklists, write them to files,
create a NetWitness version of the files (txt with comma separated values), and then create a master 
netwitness list with no duplicates.

To be added later: 
1) Reference option so one can provide an IP/Domain name and have a return say what URL/list listed it.
2) Log file one can reference to determine date/time of each file update as well as error.

@author: Nephos
'''


import os
import time
import urllib2, urllib
import datetime
import re
import pyperclip

def parse2Netwitness(fileName,ipBlockLists):
    '''
    This function is called from within the getFile function in order to parse the newly created 
    files into comma separated values in a new txt file with a _NW suffix.
    '''
    # Check for existing NW version file and if there, delete it...
    NWfileName = fileName[:-4]+"_NW.txt"
    fileExistance = os.path.isfile(os.path.expanduser("~\Desktop\Block Lists\{0}".format(NWfileName)))
    if fileExistance == True:
        os.remove(os.path.expanduser("~\Desktop\Block Lists\{0}".format(NWfileName)))
    else:
        pass
    
    # Parse original data into NW version file...
    print "Parsing {0} to create NetWitness formated version...".format(fileName)
    if fileName in ipBlockLists:
        os.chdir(os.path.expanduser("~/Desktop/Block Lists")) 
        originalData = open(fileName)
        outputFile = open(NWfileName, 'a')
        dataList = []
        for line in originalData:
            dataList.append(re.findall(r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$",line))
            while len(dataList) > 0:
                NWdata = dataList.pop()
                if NWdata == []:
                    pass
                else:
                    outputFile.write("".join(NWdata) + ", ")
        outputFile.close()
        print "  Creation of NetWitness formated version of {0} complete!\n".format(fileName)
    elif fileName == "palevotracker-Domain-blocklist.txt":
        pass #place holder... do something here
    elif fileName == "zeustracker-Domain-blocklist.txt":
        pass #place holder... do something here
    elif fileName == "malware-Standard-blocklist.txt":
        pass #place holder... do something here
    elif fileName == "malware-Agressive-blocklist.txt":
        pass #place holder... do something here
    elif fileName == "malc0de-Domain-blocklist.txt":
        pass #place holder... do something here
    elif fileName == "spyeyetracker-Domain-blocklist.txt":
        pass #place holder... do something here
    elif fileName == "spamhausDrop-IP-blocklist.txt":
        pass #place holder... do something here
    elif fileName == "spamhausEDrop-IP-blocklist.txt":
        pass #place holder... do something here
    elif fileName == "hostfile-Domain-blocklist.txt":
        pass #place holder... do something here
    elif fileName == "malwaredomainlist-Domain-blocklist.txt":
        pass #place holder... do something here
    
    # Write to Log file

def getFile(fileName):
    '''
    This function takes the fileName, retrieves the blocklists from online, 
    writes them to disk and then calls the parse2Netwitness function to parse 
    these newly created files into netwitness (csv) format.
    '''
    print "\nProcessing file:    {0}".format(fileName)
    if fileName == "palevotracker-Domain-blocklist.txt":
        url = "https://palevotracker.abuse.ch/blocklists.php?download=domainblocklist"
    elif fileName == "palevotracker-IP-blocklist.txt":
        url = "https://palevotracker.abuse.ch/blocklists.php?download=ipblocklist"
    elif fileName == "zeustracker-IP-blocklist.txt":
        url = "https://zeustracker.abuse.ch/blocklist.php?download=ipblocklist"
    elif fileName == "zeustracker-Domain-blocklist.txt":
        url = "https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist"
    elif fileName == "malware-Standard-blocklist.txt":
        url = "http://www.malware.com.br/cgi/submit?action=list"
    elif fileName == "malware-Agressive-blocklist.txt":
        url = "http://www.malware.com.br/cgi/submit-agressive?action=list&type=agressive"
    elif fileName == "malc0de-IP-blocklist.txt":
        url = "http://malc0de.com/bl/IP_Blacklist.txt"
    elif fileName == "malc0de-Domain-blocklist.txt":
        url = "http://malc0de.com/bl/BOOT"
    elif fileName == "blocklistDE-IP-blocklist.txt":
        url = "http://lists.blocklist.de/lists/all.txt"
    elif fileName == "spyeyetracker-IP-blocklist.txt":
        url = "https://spyeyetracker.abuse.ch/blocklist.php?download=ipblocklist"
    elif fileName == "spyeyetracker-Domain-blocklist.txt":
        url = "https://spyeyetracker.abuse.ch/blocklist.php?download=domainblocklist"
    elif fileName == "spamhausDrop-IP-blocklist.txt":
        url = "http://www.spamhaus.org/drop/drop.txt"
    elif fileName == "spamhausEDrop-IP-blocklist.txt":
        url = "http://www.spamhaus.org/drop/edrop.txt"
    elif fileName == "hostfile-Domain-blocklist.txt":
        url = "http://hosts-file.net/download/hosts.txt"
    elif fileName == "malwaredomainlist-Domain-blocklist.txt":
        url = "http://www.malwaredomainlist.com/hostslist/hosts.txt"
    #else:
        # Write code here to log failure to log file.
    
    # Check site for availability...(Code copied as shown. Will rewrite later without class)
    class NoRedirectHandler(urllib2.HTTPRedirectHandler):
        def http_error_302(self, req, fp, code, msg, headers):
            infourl = urllib.addinfourl(fp, headers, req.get_full_url())
            infourl.status = code
            infourl.code = code
            return infourl
        http_error_300 = http_error_302
        http_error_301 = http_error_302
        http_error_303 = http_error_302
        http_error_307 = http_error_302
    opener = urllib2.build_opener(NoRedirectHandler())
    urllib2.install_opener(opener)
    response = urllib2.urlopen(url)
    if response.code in (300, 301, 302, 303, 307):
        siteStatus = "Site Redirected"     #(this is required due to Websense sometimes blocking pages)
    elif response.code == 200:
        siteStatus = "Site OK"
    else:
        siteStatus = "Site Down"
   
    # If site is available, get the data...
    if siteStatus == "Site OK":
        req = urllib2.Request(url)
        response = urllib2.urlopen(req)
        originalFileData = response.read()
        
        # Create the file with the original online data:
        print "Writing data from:  {0} \nto file:            {1}.".format(url,fileName) 
        os.chdir(os.path.expanduser("~/Desktop/Block Lists")) 
        outputFile = open (fileName, 'w')
        outputFile.write(originalFileData)
        outputFile.close()
        print "\nDone writing file:  {0}.\n".format(fileName)
         
        # Parsing original data to NetWitness formatted file:
        parse2Netwitness(fileName, ipBlockLists)
    else:
        print "Unable to obtain data from {0}.\n'siteStatus code: {1}".format(url,siteStatus)
    
    # Write to Log file
    

def createMasterNWFile(fileName, ipBlockLists):
    '''
    This function merges the contents of all IP block lists into one master txt list
    formated to be used in NetWitness (CSV) and containing no duplicates.
    '''
    # Check for existing NW master file and if there, delete it...
    masterIPNWlist = "master-IP-blocklist_NW.txt"
    fileExistance = os.path.isfile(os.path.expanduser("~\Desktop\Block Lists\{0}".format(masterIPNWlist)))
    if fileExistance == True:
        os.remove(os.path.expanduser("~\Desktop\Block Lists\{0}".format(masterIPNWlist)))
    else:
        pass
    # Create master list
    print "Creating master NetWitness list..."
    os.chdir(os.path.expanduser("~/Desktop/Block Lists")) 
    outputFile = open(masterIPNWlist, 'a')
    masterNWlist = []
    fileName = fileName[:-4]+"_NW.txt"
    dataString = open(fileName,'r').read()
    IPlist = re.split(r"\s*[,]\s*", dataString.strip())
    while len(IPlist) > 0:
        IP = IPlist.pop()
        if IP != '':
            masterNWlist.append(IP)
        else:
            pass
    # Remove duplicates and sort...        
    masterNWlist = list(set(masterNWlist))
    masterNWlist.sort()
    # Write to file...
    while len(masterNWlist) > 0:
        ip = masterNWlist.pop()
        outputFile.write("".join(ip) + ", ")
    outputFile.close()
    print "  Creation of master NetWitness list complete!\n\n\n"
       
    
    


#|______PROGRAM STARTS HERE_______________________________________________________________________|
if __main__ == "__main__":
    # If "Block Lists" directory does not exist, make it else, move on.
    if not os.path.exists(os.path.expanduser("~/Desktop/Block Lists")):
        os.mkdir(os.path.expanduser("~/Desktop/Block Lists"))
    else:
        pass
    
    # List of files that should be in the Block List Dir. (Have not coded for the commented out files.)
    fileList = ["palevotracker-IP-blocklist.txt", 
    #         "palevotracker-Domain-blocklist.txt",
             "zeustracker-IP-blocklist.txt",
    #         "zeustracker-Domain-blocklist.txt",
    #         #"malware-Standard-blocklist.txt",
    #         #"malware-Agressive-blocklist.txt",
             "malc0de-IP-blocklist.txt",
    #         "malc0de-Domain-blocklist.txt",
             "blocklistDE-IP-blocklist.txt",
             "spyeyetracker-IP-blocklist.txt",
    #         "spyeyetracker-Domain-blocklist.txt",
    #         "spamhausDrop-IP-blocklist.txt",
    #         "spamhausEDrop-IP-blocklist.txt",
    #         "hostfile-Domain-blocklist.txt",
    #         "malwaredomainlist-Domain-blocklist.txt"
            ]
    fileList.sort()
    
    # List of the files from above that deal with ONLY IPs. DO NOT ALTER ORDER!... 
    # Must be the same order of the .pop() of the fileList above.
    ipBlockLists = ["spyeyetracker-IP-blocklist.txt",
                    "blocklistDE-IP-blocklist.txt",
                    "malc0de-IP-blocklist.txt",
                    "zeustracker-IP-blocklist.txt",
                    "palevotracker-IP-blocklist.txt",
                    ]
    ipBlockLists.sort()
    
    # Cycle thru fileList while checking if each file is current and pull down any missing or non current lists.
    listIndex = len(fileList)
    while listIndex > 0: 
        listIndex = listIndex-1
        fileName = fileList[listIndex]
        # See if file exists...
        fileExistance = os.path.isfile(os.path.expanduser("~\Desktop\Block Lists\{0}".format(fileName)))
        # If file exists, check its modify date...
        if fileExistance == True:
            creationDate = time.strftime("%m-%d-%Y",time.localtime(os.path.getmtime(os.path.expanduser("~\Desktop\Block Lists\{0}".format(fileName)))))
            now = datetime.datetime.now()
            if creationDate != now.strftime("%m-%d-%Y"):
                fileDate = "Not Current"
                print "{0} file is NOT local or is not current.\n   Queuing for retrieval...\n".format(fileName)
            else:
                fileDate = "Current"
                print "{0} file is local and current.".format(fileName)
        else:
            fileDate = "Not Current"  
        
        # If file not there or not current, get it...write it...parse it...and create NetWitness version...
        if fileDate == "Not Current":
            getFile(fileName) # This function gets the online data and calls the parse2Netwitness function as well.
            createMasterNWFile(fileName, ipBlockLists) 
    
    
    print "\n\n All Done!...\n\n"
    copyToClipboard = raw_input("Would you like to have the NetWitness list sent to the clipboard for easy pasting?\n (Y/N) ")
    if copyToClipboard.strip() in "y Y yes YES Yes".split():
        os.chdir(os.path.expanduser("~/Desktop/Block Lists")) 
        NWlistString = open("master-IP-blocklist_NW.txt",'r').read()
        pyperclip.copy('{0}'.format(NWlistString))
        spam = pyperclip.paste()
    
    
    raw_input("Done!")
    exit()
        
    #!#!# Build Point !#!#!#!#!#!#!#!#!#!#!
    


